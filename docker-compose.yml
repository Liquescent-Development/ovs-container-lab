services:
  # OVN SDN Controller (central control plane)
  ovn-central:
    build: ./ovn-container
    container_name: ovn-central
    hostname: ovn-central
    restart: unless-stopped
    privileged: true
    networks:
      transit-overlay:
        ipv4_address: 192.168.100.5
    ports:
      - "6641:6641"  # OVN Northbound DB
      - "6642:6642"  # OVN Southbound DB
      - "9876:5000"  # Docker network driver API (map container 5000 to host 9876)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker API access
      - ovn-nb-db:/var/lib/ovn
      - ovn-logs:/var/log/ovn
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
      - SYS_NICE
    environment:
      - ENABLE_DOCKER_DRIVER=false
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    labels:
      - "ovs-lab=true"
      - "component=control-plane"

  # NAT Gateway for external connectivity
  nat-gateway:
    build: ./nat-gateway
    container_name: nat-gateway
    hostname: nat-gateway
    restart: unless-stopped
    privileged: true
    networks:
      - default  # Start with bridge network for internet access
    cap_add:
      - NET_ADMIN
      - NET_RAW
    sysctls:
      - net.ipv4.ip_forward=1
    labels:
      - "ovs-lab=true"
      - "component=gateway"

  # OVS runs on the host VM, not in containers
  # This simplifies networking and avoids Docker bridge issues


  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    labels:
      - "ovs-lab=true"
      - "component=monitoring"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    labels:
      - "ovs-lab=true"
      - "component=monitoring"


  # ==================== TEST CONTAINERS - VPC A ====================

  vpc-a-web:
    build: ./vpc-container
    container_name: vpc-a-web
    hostname: vpc-a-web
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=web
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=web"

  vpc-a-app:
    build: ./vpc-container
    container_name: vpc-a-app
    hostname: vpc-a-app
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=app
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=app"

  vpc-a-db:
    build: ./vpc-container
    container_name: vpc-a-db
    hostname: vpc-a-db
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=db
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=db"

  # ==================== TEST CONTAINERS - VPC B ====================

  vpc-b-web:
    build: ./vpc-container
    container_name: vpc-b-web
    hostname: vpc-b-web
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=web
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=web"

  vpc-b-app:
    build: ./vpc-container
    container_name: vpc-b-app
    hostname: vpc-b-app
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=app
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=app"

  vpc-b-db:
    build: ./vpc-container
    container_name: vpc-b-db
    hostname: vpc-b-db
    restart: unless-stopped
    network_mode: none  # Will be connected to OVS
    environment:
      - TIER=db
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=db"

  # ==================== TRAFFIC GENERATION ====================

  traffic-gen-a:
    build: ./traffic-generator
    container_name: traffic-gen-a
    hostname: traffic-gen-a
    restart: "no"
    network_mode: none  # Will be connected to OVS
    privileged: true
    volumes:
      - ./traffic-generator:/workspace
    command: sleep infinity
    # Resource limits to prevent system hang
    deploy:
      resources:
        limits:
          cpus: '0.5'  # 50% of one CPU core
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "ovs-lab=true"
      - "component=testing"
      - "vpc=a"
      - "tier=test"
    profiles:
      - traffic

  traffic-gen-b:
    build: ./traffic-generator
    container_name: traffic-gen-b
    hostname: traffic-gen-b
    restart: "no"
    network_mode: none  # Will be connected to OVS
    privileged: true
    volumes:
      - ./traffic-generator:/workspace
    command: sleep infinity
    # Resource limits to prevent system hang
    deploy:
      resources:
        limits:
          cpus: '0.5'  # 50% of one CPU core
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "ovs-lab=true"
      - "component=testing"
      - "vpc=b"
      - "tier=test"
    profiles:
      - traffic

  # ==================== CHAOS ENGINEERING ====================

  pumba:
    image: gaiaadm/pumba:latest
    container_name: pumba
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --help  # Default to help, will be overridden when running chaos
    labels:
      - "ovs-lab=true"
      - "component=chaos"
    profiles:
      - chaos

networks:
  transit-overlay:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1

volumes:
  prometheus-data:
  grafana-data:
  ovn-nb-db:
  ovn-logs: