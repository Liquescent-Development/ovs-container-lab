# OVS Container Lab - Simplified setup using Docker plugin directly
# No network-config.yaml needed - everything defined here!

services:
  # OVN SDN Controller (central control plane)
  # NOTE: OVN central is now auto-created by the Docker network plugin when needed
  # To manually create OVN central, uncomment this service
  # ovn-central:
  #   build: ./ovn-container
  #   container_name: ovn-central
  #   hostname: ovn-central
  #   restart: unless-stopped
  #   privileged: true
  #   networks:
  #     transit-overlay:
  #       ipv4_address: 192.168.100.5
  #   ports:
  #     - "6641:6641"  # OVN Northbound DB
  #     - "6642:6642"  # OVN Southbound DB
  #     - "9876:5000"  # Docker network driver API (map container 5000 to host 9876)
  #     - "9476:9476"  # OVN Exporter metrics
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock  # Docker API access
  #     - ovn-nb-db:/var/lib/ovn
  #     - ovn-logs:/var/log/ovn
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #     - SYS_NICE
  #   # Docker driver now handled by separate ovs-container-network plugin
  #   healthcheck:
  #     test: ["CMD", "/healthcheck.sh"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 60s
  #   labels:
  #     - "ovs-lab=true"
  #     - "component=control-plane"

  # NAT Gateway for external connectivity
  nat-gateway:
    build: ./nat-gateway
    container_name: nat-gateway
    hostname: nat-gateway
    restart: unless-stopped
    privileged: true
    networks:
      default:  # Keep bridge network for internet access
      transit-net:  # Connect to transit network for OVN
        ipv4_address: 192.168.100.254
    cap_add:
      - NET_ADMIN
      - NET_RAW
    sysctls:
      - net.ipv4.ip_forward=1
    labels:
      - "ovs-lab=true"
      - "component=gateway"

  # Note: OVS runs on the host VM, configured by 'make setup-vm'


  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    labels:
      - "ovs-lab=true"
      - "component=monitoring"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    labels:
      - "ovs-lab=true"
      - "component=monitoring"

  # Monitoring - InfluxDB v1.11 (Time Series Database)
  influxdb:
    image: influxdb:1.11-alpine
    container_name: influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=ovs_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    volumes:
      - influxdb-data:/var/lib/influxdb
    labels:
      - "ovs-lab=true"
      - "component=monitoring"

  # Monitoring - Telegraf v1.34 (Metrics Collection)
  telegraf:
    image: telegraf:1.34-alpine
    container_name: telegraf
    restart: unless-stopped
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
    labels:
      - "ovs-lab=true"
      - "component=monitoring"


  # ==================== TEST CONTAINERS - VPC A ====================

  vpc-a-web:
    build: ./vpc-container
    container_name: vpc-a-web
    hostname: vpc-a-web
    restart: unless-stopped
    networks:
      vpc-a-web-net:
        ipv4_address: 10.0.1.10
    environment:
      - TIER=web
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=web"

  vpc-a-app:
    build: ./vpc-container
    container_name: vpc-a-app
    hostname: vpc-a-app
    restart: unless-stopped
    networks:
      vpc-a-app-net:
        ipv4_address: 10.0.2.10
    environment:
      - TIER=app
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=app"

  vpc-a-db:
    build: ./vpc-container
    container_name: vpc-a-db
    hostname: vpc-a-db
    restart: unless-stopped
    networks:
      vpc-a-db-net:
        ipv4_address: 10.0.3.10
    environment:
      - TIER=db
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=a"
      - "tier=db"

  # ==================== TEST CONTAINERS - VPC B ====================

  vpc-b-web:
    build: ./vpc-container
    container_name: vpc-b-web
    hostname: vpc-b-web
    restart: unless-stopped
    networks:
      vpc-b-web-net:
        ipv4_address: 10.1.1.10
    environment:
      - TIER=web
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=web"

  vpc-b-app:
    build: ./vpc-container
    container_name: vpc-b-app
    hostname: vpc-b-app
    restart: unless-stopped
    networks:
      vpc-b-app-net:
        ipv4_address: 10.1.2.10
    environment:
      - TIER=app
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=app"

  vpc-b-db:
    build: ./vpc-container
    container_name: vpc-b-db
    hostname: vpc-b-db
    restart: unless-stopped
    networks:
      vpc-b-db-net:
        ipv4_address: 10.1.3.10
    environment:
      - TIER=db
    profiles:
      - testing
      - vpc
    labels:
      - "ovs-lab=true"
      - "vpc=b"
      - "tier=db"

  # ==================== TRAFFIC GENERATION ====================

  traffic-gen-a:
    build: ./traffic-generator
    container_name: traffic-gen-a
    hostname: traffic-gen-a
    restart: "no"
    networks:
      vpc-a-test-net:
        ipv4_address: 10.0.4.10
    privileged: true
    volumes:
      - ./traffic-generator:/workspace
    command: sleep infinity
    # Resource limits to prevent system hang
    deploy:
      resources:
        limits:
          cpus: '0.5'  # 50% of one CPU core
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "ovs-lab=true"
      - "component=testing"
      - "vpc=a"
      - "tier=test"
    profiles:
      - traffic

  traffic-gen-b:
    build: ./traffic-generator
    container_name: traffic-gen-b
    hostname: traffic-gen-b
    restart: "no"
    networks:
      vpc-b-test-net:
        ipv4_address: 10.1.4.10
    privileged: true
    volumes:
      - ./traffic-generator:/workspace
    command: sleep infinity
    # Resource limits to prevent system hang
    deploy:
      resources:
        limits:
          cpus: '0.5'  # 50% of one CPU core
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "ovs-lab=true"
      - "component=testing"
      - "vpc=b"
      - "tier=test"
    profiles:
      - traffic

  # ==================== CHAOS ENGINEERING ====================

  pumba:
    image: gaiaadm/pumba:latest
    container_name: pumba
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --help  # Default to help, will be overridden when running chaos
    labels:
      - "ovs-lab=true"
      - "component=chaos"
    profiles:
      - chaos

networks:
  # Transit network for inter-VPC routing and external connectivity
  transit-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      ovn.role: transit
      ovn.switch: ls-transit
      ovn.external_gateway: 192.168.100.254
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"  # Auto-create OVN central if not running
    ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1

  # Transit overlay network is auto-created by the plugin when ovn.auto_create is true
  # If you want to manually create it, uncomment below:
  # transit-overlay:
  #   driver: bridge
  #   ipam:
  #     config:
  #       - subnet: 192.168.100.0/24
  #         gateway: 192.168.100.1

  # VPC-A Networks using OVS plugin
  vpc-a-web-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-1
      vlan: "101"
      ovn.switch: ls-vpc-a-web
      ovn.router: lr-vpc-a
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.0.1.0/24
          gateway: 10.0.1.1

  vpc-a-app-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-1
      vlan: "102"
      ovn.switch: ls-vpc-a-app
      ovn.router: lr-vpc-a
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.0.2.0/24
          gateway: 10.0.2.1

  vpc-a-db-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-1
      vlan: "103"
      ovn.switch: ls-vpc-a-db
      ovn.router: lr-vpc-a
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.0.3.0/24
          gateway: 10.0.3.1

  vpc-a-test-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-1
      vlan: "104"
      ovn.switch: ls-vpc-a-test
      ovn.router: lr-vpc-a
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.0.4.0/24
          gateway: 10.0.4.1

  # VPC-B Networks using OVS plugin
  vpc-b-web-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-2
      vlan: "201"
      ovn.switch: ls-vpc-b-web
      ovn.router: lr-vpc-b
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.1.1.0/24
          gateway: 10.1.1.1

  vpc-b-app-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-2
      vlan: "202"
      ovn.switch: ls-vpc-b-app
      ovn.router: lr-vpc-b
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.1.2.0/24
          gateway: 10.1.2.1

  vpc-b-db-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-2
      vlan: "203"
      ovn.switch: ls-vpc-b-db
      ovn.router: lr-vpc-b
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.1.3.0/24
          gateway: 10.1.3.1

  vpc-b-test-net:
    driver: ovs-container-network:latest
    driver_opts:
      bridge: br-int
      tenant_id: tenant-2
      vlan: "204"
      ovn.switch: ls-vpc-b-test
      ovn.router: lr-vpc-b
      ovn.transit_network: transit-net
      ovn.nb_connection: tcp:172.30.0.5:6641
      ovn.sb_connection: tcp:172.30.0.5:6642
      ovn.auto_create: "true"
    ipam:
      config:
        - subnet: 10.1.4.0/24
          gateway: 10.1.4.1

volumes:
  prometheus-data:
  grafana-data:
  influxdb-data:
  ovn-nb-db:
  ovn-logs: